let express,cors,ApolloServer,gql,graphqlHTTP,buildSchema;_45a‍.w("express",[["default",["express"],function(v){express=v}]]);_45a‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_45a‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_45a‍.w("express-graphql",[["graphqlHTTP",["graphqlHTTP"],function(v){graphqlHTTP=v}]]);_45a‍.w("graphql",[["buildSchema",["buildSchema"],function(v){buildSchema=v}]]);// import { createServer } from 'http';





const app = express();

// app.use('/graphql', graphqlHTTP({
//     schema: buildSchema(`
//     type Query {
//       hello: String
//     }
//   `),
//     rootValue: {
//         hello: () => {
//           return 'Hello world!';
//         },
//       },
//     graphiql: true,
//   }));

const server = new ApolloServer({
    typeDefs: gql`
        type Client{
            id: ID!
            name: String!
        }

        type Demand{
            id: ID!
            name: String
            client: Client!
            deadline: String
        }

        type Query {
            demands: [Demand]!
        }
    
    `,

    resolvers: {
        Query : {
            demands: () => [],
        }
    },
    introspection: true,
    playground: true,
});

server.start().then(
    server.applyMiddleware({
        app,
        cors: {
            origin: 'http://localhost:3000',
        },
    })
);
// async () => {
//     await server.start();
//     server.applyMiddleware({
//         app,
//         cors: {
//             origin: 'http://localhost:3000',
//         },
//     })
// };



// const enableCors = cors({ origin: 'http://localhost:3000'});


// app.get('/status', (_,res) =>{
//     res.send({
//         status: 'Okay',
//     });
// });

// app.options('/authenticate', enableCors).post('/authenticate', enableCors, express.json(), (req,res) => {
//     console.log(req.body);
//     res.send({
//         Okay: true,
//     });
// });


// const server = createServer((request, response) => {
//     switch (request.url) {

//         case '/status': {
//             response.writeHead(200, {
//                 'Content-Type': 'application/json',
//             });
//             response.write(JSON.stringify({
//                 status: 'Okay',
//             }));
//             response.end();
//             break;
//         }

//         case '/authenticate': {
//             let data = '';
//             request.on('data', (chunk) => {
//                 data += chunk;
//             });
//             request.on('end', () => {
//                 response.end(data);
//             });
//             break;
//         }

//         default: {
//             response.writeHead(404, 'Service not found');
//             response.end();
//             break;
//         }
//     }
// });

const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8000;
const HOSTNAME = 
process.env.HOSTNAME || 
'127.0.0.1';

app.listen(PORT, HOSTNAME, () => {
    console.log(`server is listening at http://${HOSTNAME}:${PORT}`)
});